Some Notes for Mtg on 3-15-13 for OpenDST
-----------------------------------------

Meta principle 

When in doubt lean towards being goal oriented over process obsessed.


~ Lesson principles I follow (conceptual architecture of template and lessons)

* Start from real world experience <-- this is critical (don't start with an algorithm pulled out of a hat) 
* Motivate the student with "why do we need to model this?"  
** keep answering that question throughout the lesson - explicitly or implicitly
* Segue to formalism - make a smooth transition
* Just enough math
* Successive small wins = small slope to learning curve always 
* Less is far better - Just enough new material per lesson, per page, per step.
** aggressively drop gratuitous steps or content
* Add complexity incrementally from one lesson to next - don't introduce all steps in template all at once
** again "Less is far better"

What does 0.1 mean?

* first cut at end to end product
* features will not be complete 
** a lesson will not have everything that 1.0 will have log bugs
** short list of lessons - could be expanded for 1.0
* architecture may need rework as versions progress, but chunks will remain more or less the same
* there will be known bugs 

* Bug Levels

* Level 1 broken must fix by next review
* Level 2 cosmetic or not-major but need to fix by release
* Level 3 after 0.1 - may be major but is not included in this release (e.g. detailed discussion of error measures residuals, model performance etc)

What should we aim for or avoid

* focus on conceptual flow for target student
* measure against some known rubric - create this if missing - keep rubric as consensus guideline 
* feel free to violate rubric to improve the user learning experience 

* maintain consistency but don't focus on corner cases (L3, architecture)
* don't obsess about titles and subtitles during dev (L2 bug)
* don't have typos in titles (L2 bug)
* don't have conceptually wrong things (L1 bug)
* don't have bugs in the the math (L1 bug)
* don't violate "just enough math" principle (L1 bug)

~ outline objective requirements in bullet points
* objectives from Alpine POV
** what is the goal?


[[ 

My goals:

* Turn people on to this way of learning Data Science (this is the goal for 1.0 only some of these will be met in 0.1)
* Show them "It's not Rocket Science it's Data Science" (you too can do it). By showing

* It is relevant and it is important to make the effort
* The effort is small but you have to stick with it - Just Enough Math
* At the end of a week or so you are at a whole new, different, greater level of understanding
* Accommodate language of your choice (not all in 0.1 but 3 or 4)
* Accommodate multiple learning styles ( not in 0.1 )

Don't add product sales in the middle of the lesson
Show application of lessons in as many different products as needed separate from the teaching.

My beliefs:

If you do this well, the brand equity goes up massively without explicit selling.
The less you "sell" the more your credibility, the more you "sell", the more you degrade the +ve value created by all this effort.
The quality of the lessons is the absolute best sales collateral you will ever create.

Aim for the Java effect - it was massive and one thing Sun did well.
 
]]

[[ What are Alpine's goals ]]

* audience characteristics (also see Mission Statement) 
* what are audience segments
** we want to make sure we hit a sweet spot and not leave entire segments out

Update on BugTracker

~ Have set up bug tracker on GDocs


~ need to really nail down 
* data sets for
** 0.1 dev [[ use what's available ]]
** 0.1 release [[ need top nail down by EOMarch ]]


Order of review

a) Exposition
b) Data set
c) Figures

Rest is mechanics and can be reviewed outside f2f group time and bugs logged.


~ set up git environment















